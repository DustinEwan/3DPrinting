{"version":3,"sources":["util/math.js","Components/LineWidth/LineWidth.js","util/color.js","App.js","serviceWorker.js","index.js"],"names":["roundTo","value","places","Math","round","pow","SAFETY_DETERMINATIONS","SAFETY_COLORS","cylinderVolume","radius","height","PI","LineWidth","React","useState","nozzleDiameter","setNozzleDiameter","nozzleFlatSize","setNozzleFlatSize","idealLayerHeightStep","setIdealLayerHeightStep","outputVolume","useMemo","layerHeights","heights","i","push","tableRecords","map","layerHeight","key","idealLineWidth","sqrt","calculateIdealLineWidth","minLineWidth","maxLineWidth","minExtrusionVolume","minVolumeDelta","maxExtrusionVolume","maxVolumeDelta","layerHeightSafetyColor","ratio","determineLayerHeightSafety","lineWidthSafetyColor","lineWidth","shift","shiftHex","abs","toString","console","log","determineLineWidthSafety","worstSafetyDetermination","danger","warning","safe","Object","values","includes","notes","rowColor","hex","overrideH","overrideS","overrideL","r","g","b","length","cmin","min","cmax","max","delta","h","s","l","toFixed","hexToHSL","renderCellBackground","props","style","background","children","columns","title","dataIndex","render","Item","label","onChange","e","floatValue","parseFloat","target","isNaN","step","type","dataSource","pagination","App","className","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yQAAaA,EAAU,SAACC,EAAOC,GAAR,OACrBC,KAAKC,MAAMH,EAAQE,KAAKE,IAAI,GAAIH,IAAWC,KAAKE,IAAI,GAAIH,I,iCCQpDI,EACE,OADFA,EAEK,UAFLA,EAGI,SAGJC,GAAa,mBAChBD,EAA6B,QADb,cAEhBA,EAAgC,QAFhB,cAGhBA,EAA+B,QAHf,GA6DbE,EAAiB,SAACC,EAAQC,GAAT,OACrBP,KAAKQ,GAAKR,KAAKE,IAAII,EAAQ,GAAKC,GAM3B,SAASE,IAAa,IAAD,EACkBC,IAAMC,SA/EpB,IA8EJ,mBACnBC,EADmB,KACHC,EADG,OAIkBH,IAAMC,SAjFnB,IA6EL,mBAInBG,EAJmB,KAIHC,EAJG,OAO8BL,IAAMC,SAnFxB,KA4EZ,mBAOnBK,EAPmB,KAOGC,EAPH,KAWpBC,EAAeR,IAAMS,SACzB,kBAAMd,EAAeO,EAAiB,EAAGA,KACzC,CAACA,IAGGQ,EAAeV,IAAMS,SAAQ,WAGjC,IAFA,IAAME,EAAU,GAGVC,EAAIN,EACRM,GAAsB,IAAjBV,EACLU,GAAKN,EAELK,EAAQE,KAAKD,GAGf,OAAOD,IACN,CAACL,EAAsBJ,IAEpBY,EAAed,IAAMS,SACzB,kBACEC,EAAaK,KAAI,SAACC,GAChB,IA/FgBC,EA+FVC,EArCkB,SAAChB,EAAgBc,GAAjB,OAC9B,EACA1B,KAAK6B,KAAMjB,EAAiBc,EAAe1B,KAAKE,IAAIU,EAAiB,EAAG,IAmC3CkB,CACrBlB,EACAc,GAGIK,EAAeL,EAAcd,EAC7BoB,EAAeN,EAAcZ,EAE7BmB,EAAqB5B,EACzB0B,EAAe,EACfL,GAEIQ,EAA2D,KAAzCD,EAAqBf,EAAe,GAEtDiB,EAAqB9B,EACzB2B,EAAe,EACfN,GAEIU,EAA2D,KAAzCD,EAAqBjB,EAAe,GAEtDmB,EACJjC,EAlHyB,SAACsB,EAAad,GAC/C,IAAM0B,EAAQZ,EAAcd,EAE5B,OAAI0B,GAAS,GACJnC,EAGLmC,GAAS,IACJnC,EAGFA,EAwGGoC,CAA2Bb,EAAad,IAGtC4B,GAxHUb,EAgBS,SAC/Bc,EACAf,EACAd,EACAE,GAEA,IAAMiB,EAAeL,EAAcd,EAGnC,GAAI6B,EAAY,GAAMV,GAAgBU,EAFjBf,EAAcZ,EAGjC,OAAOX,EAGT,GAAIsC,EAAYV,EAAc,CAC5B,IAKMW,IAJQX,EAAeU,IADH,GAAMV,GAKJ,IAAO,GAC7BY,EAAW3C,KAAKC,MAA8B,IAAvB,EAAID,KAAK4C,IAAIF,KAAcG,SAAS,IAIjE,OAFAC,QAAQC,IAAIL,EAAO1C,KAAK4C,IAAI,EAAIF,GAAQC,GAEpCD,EAAQ,EACJ,KAAN,OAAYC,EAAZ,KAGED,EAAQ,EACJ,IAAN,OAAWC,EAAX,MAGK,OAIT,OAAOxC,EAqEC6C,CACEpB,EACAF,EACAd,EACAE,GA7HoBV,EAAcuB,IAAQA,GAiIxCsB,EAA4B,WAChC,IAAMC,EAAS9C,EAAcD,GACvBgD,EAAU/C,EAAcD,GACxBiD,EAAOhD,EAAcD,GAE3B,OACEkC,IAA2Ba,GAC3BV,IAAyBU,EAElBA,EAGJG,OAAOC,OAAOlD,GAAemD,SAASf,GAKzCH,IAA2Bc,GAC3BX,IAAyBW,EAElBA,EAGFC,EAVEZ,EAbuB,GA0B5BgB,EACA5B,EAAiBI,EAEb,uBAAN,OAA8BnC,EADgC,KAArC+B,EAAiBI,EAAe,GAGvD,GAFF,2GAMEJ,EAAiB,GAAMG,EAEnB,uBAAN,OAA8BlC,EADiC,KAArC,EAAI+B,EAAiBG,GAG7C,GAFF,+IAMEH,EAAiBG,EAEb,uBAAN,OAA8BlC,EADiC,KAArC,EAAI+B,EAAiBG,GAG7C,GAFF,0GAMK,iIAGTe,QAAQC,IACNV,EACAG,EACAS,GAGF,IAAMQ,EClNP,SAAkBC,EAAKC,EAAWC,EAAWC,GAElD,IAAIC,EAAI,EACNC,EAAI,EACJC,EAAI,EACa,IAAfN,EAAIO,QACNH,EAAI,KAAOJ,EAAI,GAAKA,EAAI,GACxBK,EAAI,KAAOL,EAAI,GAAKA,EAAI,GACxBM,EAAI,KAAON,EAAI,GAAKA,EAAI,IACA,IAAfA,EAAIO,SACbH,EAAI,KAAOJ,EAAI,GAAKA,EAAI,GACxBK,EAAI,KAAOL,EAAI,GAAKA,EAAI,GACxBM,EAAI,KAAON,EAAI,GAAKA,EAAI,IAG1BI,GAAK,IACLC,GAAK,IACLC,GAAK,IACL,IAAIE,EAAOlE,KAAKmE,IAAIL,EAAGC,EAAGC,GACxBI,EAAOpE,KAAKqE,IAAIP,EAAGC,EAAGC,GACtBM,EAAQF,EAAOF,EACfK,EAAI,EACJC,EAAI,EACJC,EAAI,EAgBN,OAdiBF,EAAH,IAAVD,EAAiB,EACZF,IAASN,GAASC,EAAIC,GAAKM,EAAS,EACpCF,IAASL,GAAQC,EAAIF,GAAKQ,EAAQ,GACjCR,EAAIC,GAAKO,EAAQ,GAE3BC,EAAIZ,GAAa3D,KAAKC,MAAU,GAAJsE,IAEpB,IAAGA,GAAK,KAEhBE,GAAKL,EAAOF,GAAQ,EAEpBM,IAAU,KADVA,EAAc,IAAVF,EAAc,EAAIA,GAAS,EAAItE,KAAK4C,IAAI,EAAI6B,EAAI,MACrCC,QAAQ,GACvBD,IAAU,IAAJA,GAASC,QAAQ,GAEjB,OAAN,OAAcH,EAAd,YAAmBX,GAAaY,EAAhC,aAAsCX,GAAaY,EAAnD,MD2KuBE,CAAS1B,EAA0B,KAAM,KAAM,IAEhE,MAAO,CACLvB,YAAa7B,EAAQ6B,EAAa,GAClCW,yBACAT,eAAgB/B,EAAQ+B,EAAgB,GACxCY,uBACAiB,WACA1B,aAAclC,EAAQkC,EAAc,GACpCC,aAAcnC,EAAQmC,EAAc,GACpCC,mBAAoBpC,EAAQoC,EAAoB,GAChDC,eAAe,GAAD,OAAKA,EAAiB,EAAI,IAAM,IAAhC,OAAqCrC,EACjDqC,EACA,GAFY,KAIdC,mBAAoBtC,EAAQsC,EAAoB,GAChDC,eAAe,GAAD,OAAKA,EAAiB,EAAI,IAAM,IAAhC,OAAqCvC,EACjDuC,EACA,GAFY,KAIdoB,cAGN,CAACpC,EAAcR,EAAgBE,EAAgBI,IAG3C0D,EAAuB,SAAC9E,EAAD,SAA0B,CACrD+E,MAAO,CACLC,MAAO,CAAEC,WAFgB,EAAUtB,WAIrCuB,SAAU,6BAAMlF,KAGZmF,EAAU,CACd,CACEC,MAAO,eACPC,UAAW,cACXC,OAAQ,SAACtF,EAAD,SAAwC,CAC9C+E,MAAO,CACLC,MAAO,CAAEC,WAFL,EAAU1C,yBAIhB2C,SAAU,6BAAMlF,MAGpB,CACEoF,MAAO,iBACPC,UAAW,eACXC,OAAQR,GAEV,CACEM,MAAO,oCACPC,UAAW,qBACXC,OAAQR,GAEV,CACEM,MAAO,mBACPC,UAAW,iBACXC,OAAQR,GAEV,CACEM,MAAO,mBACPC,UAAW,iBACXC,OAAQ,SAACtF,EAAD,SAAsC,CAC5C+E,MAAO,CACLC,MAAO,CAAEC,WAFL,EAAUvC,uBAIhBwC,SAAU,6BAAMlF,MAGpB,CACEoF,MAAO,iBACPC,UAAW,eACXC,OAAQR,GAEV,CACEM,MAAO,uBACPC,UAAW,qBACXC,OAAQR,GAEV,CACEM,MAAO,gCACPC,UAAW,iBACXC,OAAQR,GAEV,CACEM,MAAO,QACPC,UAAW,QACXC,OAAQR,IAIZ,OACE,oCACE,kBAAC,IAAD,KACE,kBAAC,IAAKS,KAAN,CAAWC,MAAM,2BACf,kBAAC,IAAD,CACExF,MAAOkB,EACPuE,SAAU,SAACC,GACT,IAAMC,EAAaC,WAAWF,EAAEG,OAAO7F,OAEnC8F,MAAMH,IAIVxE,EAAwBwE,IAE1BI,KAAM,OAGV,kBAAC,IAAKR,KAAN,CAAWC,MAAM,mBACf,kBAAC,IAAD,CACExF,MAAOc,EACP2E,SAAU,SAACC,GACT,IAAMC,EAAaC,WAAWF,EAAEG,OAAO7F,OAEnC8F,MAAMH,IAIV5E,EAAkB4E,IAEpBI,KAAM,OAGV,kBAAC,IAAKR,KAAN,CAAWC,MAAM,0BACdzF,EAAQqB,EAAc,IAEzB,kBAAC,IAAKmE,KAAN,CAAWC,MAAM,oBACf,kBAAC,IAAD,CACEQ,KAAK,SACLhG,MAAOgB,EACPyE,SAAU,SAACC,GACT,IAAMC,EAAaC,WAAWF,EAAEG,OAAO7F,OAEnC8F,MAAMH,IAIV1E,EAAkB0E,IAEpBI,KAAM,QAIZ,kBAAC,IAAD,CAAOE,WAAYvE,EAAcyD,QAASA,EAASe,YAAY,K,cErVtDC,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAACzF,EAAD,QCIc0F,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASpB,OACP,kBAAC,IAAMqB,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrE,QAAQqE,MAAMA,EAAMC,c","file":"static/js/main.ded0653c.chunk.js","sourcesContent":["export const roundTo = (value, places) =>\r\n  Math.round(value * Math.pow(10, places)) / Math.pow(10, places);\r\n","import React from \"react\";\r\nimport { roundTo } from \"../../util/math\";\r\nimport { hexToHSL } from \"../../util/color\";\r\nimport { Table, InputNumber, Form } from \"antd\";\r\n\r\nconst DEFAULT_NOZZLE_DIAMETER = 0.4;\r\nconst DEFAULT_NOZZLE_FLAT_SIZE = 0.6;\r\nconst DEFAULT_IDEAL_LAYER_HEIGHT_STEP = 0.04;\r\n\r\nconst SAFETY_DETERMINATIONS = {\r\n  SAFE: \"safe\",\r\n  WARNING: \"warning\",\r\n  DANGER: \"danger\",\r\n};\r\n\r\nconst SAFETY_COLORS = {\r\n  [SAFETY_DETERMINATIONS.SAFE]: \"#0f0\",\r\n  [SAFETY_DETERMINATIONS.WARNING]: \"#ff0\",\r\n  [SAFETY_DETERMINATIONS.DANGER]: \"#f00\",\r\n};\r\n\r\nconst getSafetyColor = (key) => SAFETY_COLORS[key] || key;\r\n\r\nconst determineLayerHeightSafety = (layerHeight, nozzleDiameter) => {\r\n  const ratio = layerHeight / nozzleDiameter;\r\n\r\n  if (ratio <= 0.8) {\r\n    return SAFETY_DETERMINATIONS.SAFE;\r\n  }\r\n\r\n  if (ratio <= 1.5) {\r\n    return SAFETY_DETERMINATIONS.WARNING;\r\n  }\r\n\r\n  return SAFETY_DETERMINATIONS.DANGER;\r\n};\r\n\r\nconst determineLineWidthSafety = (\r\n  lineWidth,\r\n  layerHeight,\r\n  nozzleDiameter,\r\n  nozzleFlatSize\r\n) => {\r\n  const minLineWidth = layerHeight + nozzleDiameter;\r\n  const maxLineWidth = layerHeight + nozzleFlatSize;\r\n\r\n  if (lineWidth < 0.5 * minLineWidth || lineWidth > maxLineWidth) {\r\n    return SAFETY_DETERMINATIONS.DANGER;\r\n  }\r\n\r\n  if (lineWidth < minLineWidth) {\r\n    const maxAllowableDelta = 0.5 * minLineWidth;\r\n    const delta = minLineWidth - lineWidth;\r\n\r\n    const deltaRatio = delta / maxAllowableDelta;\r\n\r\n    const shift = (deltaRatio - 0.5) / 0.5;\r\n    const shiftHex = Math.round((1 - Math.abs(shift)) * 15).toString(16);\r\n\r\n    console.log(shift, Math.abs(1 - shift), shiftHex);\r\n\r\n    if (shift > 0) {\r\n      return `#f${shiftHex}0`;\r\n    }\r\n\r\n    if (shift < 0) {\r\n      return `#${shiftHex}f0`;\r\n    }\r\n\r\n    return \"#ff0\";\r\n    //return SAFETY_DETERMINATIONS.WARNING;\r\n  }\r\n\r\n  return SAFETY_DETERMINATIONS.SAFE;\r\n};\r\n\r\nconst cylinderVolume = (radius, height) =>\r\n  Math.PI * Math.pow(radius, 2) * height;\r\n\r\nconst calculateIdealLineWidth = (nozzleDiameter, layerHeight) =>\r\n  2 *\r\n  Math.sqrt((nozzleDiameter / layerHeight) * Math.pow(nozzleDiameter / 2, 2));\r\n\r\nexport function LineWidth() {\r\n  const [nozzleDiameter, setNozzleDiameter] = React.useState(\r\n    DEFAULT_NOZZLE_DIAMETER\r\n  );\r\n  const [nozzleFlatSize, setNozzleFlatSize] = React.useState(\r\n    DEFAULT_NOZZLE_FLAT_SIZE\r\n  );\r\n  const [idealLayerHeightStep, setIdealLayerHeightStep] = React.useState(\r\n    DEFAULT_IDEAL_LAYER_HEIGHT_STEP\r\n  );\r\n\r\n  const outputVolume = React.useMemo(\r\n    () => cylinderVolume(nozzleDiameter / 2, nozzleDiameter),\r\n    [nozzleDiameter]\r\n  );\r\n\r\n  const layerHeights = React.useMemo(() => {\r\n    const heights = [];\r\n\r\n    for (\r\n      let i = idealLayerHeightStep;\r\n      i <= nozzleDiameter * 1.6;\r\n      i += idealLayerHeightStep\r\n    ) {\r\n      heights.push(i);\r\n    }\r\n\r\n    return heights;\r\n  }, [idealLayerHeightStep, nozzleDiameter]);\r\n\r\n  const tableRecords = React.useMemo(\r\n    () =>\r\n      layerHeights.map((layerHeight) => {\r\n        const idealLineWidth = calculateIdealLineWidth(\r\n          nozzleDiameter,\r\n          layerHeight\r\n        );\r\n\r\n        const minLineWidth = layerHeight + nozzleDiameter;\r\n        const maxLineWidth = layerHeight + nozzleFlatSize;\r\n\r\n        const minExtrusionVolume = cylinderVolume(\r\n          minLineWidth / 2,\r\n          layerHeight\r\n        );\r\n        const minVolumeDelta = (minExtrusionVolume / outputVolume - 1) * 100;\r\n\r\n        const maxExtrusionVolume = cylinderVolume(\r\n          maxLineWidth / 2,\r\n          layerHeight\r\n        );\r\n        const maxVolumeDelta = (maxExtrusionVolume / outputVolume - 1) * 100;\r\n\r\n        const layerHeightSafetyColor =\r\n          SAFETY_COLORS[\r\n            determineLayerHeightSafety(layerHeight, nozzleDiameter)\r\n          ];\r\n\r\n        const lineWidthSafetyColor = getSafetyColor(\r\n          determineLineWidthSafety(\r\n            idealLineWidth,\r\n            layerHeight,\r\n            nozzleDiameter,\r\n            nozzleFlatSize\r\n          )\r\n        );\r\n\r\n        const worstSafetyDetermination = (() => {\r\n          const danger = SAFETY_COLORS[SAFETY_DETERMINATIONS.DANGER];\r\n          const warning = SAFETY_COLORS[SAFETY_DETERMINATIONS.WARNING];\r\n          const safe = SAFETY_COLORS[SAFETY_DETERMINATIONS.SAFE];\r\n\r\n          if (\r\n            layerHeightSafetyColor === danger ||\r\n            lineWidthSafetyColor === danger\r\n          ) {\r\n            return danger;\r\n          }\r\n\r\n          if (!Object.values(SAFETY_COLORS).includes(lineWidthSafetyColor)) {\r\n            return lineWidthSafetyColor;\r\n          }\r\n\r\n          if (\r\n            layerHeightSafetyColor === warning ||\r\n            lineWidthSafetyColor === warning\r\n          ) {\r\n            return warning;\r\n          }\r\n\r\n          return safe;\r\n        })();\r\n\r\n        const notes = (() => {\r\n          if (idealLineWidth > maxLineWidth) {\r\n            const percentOverSpec = (idealLineWidth / maxLineWidth - 1) * 100;\r\n            return `Ideal Line Width is ${roundTo(\r\n              percentOverSpec,\r\n              2\r\n            )}% over Maximum Line Width. Material will tend to collect on the nozzle and be dragged around the print.`;\r\n          }\r\n\r\n          if (idealLineWidth < 0.5 * minLineWidth) {\r\n            const percentUnderSpec = (1 - idealLineWidth / minLineWidth) * 100;\r\n            return `Ideal Line Width is ${roundTo(\r\n              percentUnderSpec,\r\n              2\r\n            )}% under Minimum Line Width. Print will be extremely weak due to insufficient extruded material required to properly adhere layers together.`;\r\n          }\r\n\r\n          if (idealLineWidth < minLineWidth) {\r\n            const percentUnderSpec = (1 - idealLineWidth / minLineWidth) * 100;\r\n            return `Ideal Line Width is ${roundTo(\r\n              percentUnderSpec,\r\n              2\r\n            )}% under Minimum Line Width. Print will preserve more detail in the X/Y planes at the cost of strength.`;\r\n          }\r\n\r\n          return \"Ideal Line Width is within spec. Print will have maximum possible strength while preserving features and dimensional accuracy.\";\r\n        })();\r\n\r\n        console.log(\r\n          layerHeightSafetyColor,\r\n          lineWidthSafetyColor,\r\n          worstSafetyDetermination\r\n        );\r\n\r\n        const rowColor = hexToHSL(worstSafetyDetermination, null, null, 90);\r\n\r\n        return {\r\n          layerHeight: roundTo(layerHeight, 2),\r\n          layerHeightSafetyColor,\r\n          idealLineWidth: roundTo(idealLineWidth, 3),\r\n          lineWidthSafetyColor,\r\n          rowColor,\r\n          minLineWidth: roundTo(minLineWidth, 2),\r\n          maxLineWidth: roundTo(maxLineWidth, 2),\r\n          minExtrusionVolume: roundTo(minExtrusionVolume, 3),\r\n          minVolumeDelta: `${minVolumeDelta > 0 ? \"+\" : \"\"}${roundTo(\r\n            minVolumeDelta,\r\n            2\r\n          )}%`,\r\n          maxExtrusionVolume: roundTo(maxExtrusionVolume, 3),\r\n          maxVolumeDelta: `${maxVolumeDelta > 0 ? \"+\" : \"\"}${roundTo(\r\n            maxVolumeDelta,\r\n            2\r\n          )}%`,\r\n          notes,\r\n        };\r\n      }),\r\n    [layerHeights, nozzleDiameter, nozzleFlatSize, outputVolume]\r\n  );\r\n\r\n  const renderCellBackground = (value, { rowColor }) => ({\r\n    props: {\r\n      style: { background: rowColor },\r\n    },\r\n    children: <div>{value}</div>,\r\n  });\r\n\r\n  const columns = [\r\n    {\r\n      title: \"Layer Height\",\r\n      dataIndex: \"layerHeight\",\r\n      render: (value, { layerHeightSafetyColor }) => ({\r\n        props: {\r\n          style: { background: layerHeightSafetyColor },\r\n        },\r\n        children: <div>{value}</div>,\r\n      }),\r\n    },\r\n    {\r\n      title: \"Min Line Width\",\r\n      dataIndex: \"minLineWidth\",\r\n      render: renderCellBackground,\r\n    },\r\n    {\r\n      title: \"Min Δ Ideal Extrusion Volume\",\r\n      dataIndex: \"minExtrusionVolume\",\r\n      render: renderCellBackground,\r\n    },\r\n    {\r\n      title: \"Min Volume Delta\",\r\n      dataIndex: \"minVolumeDelta\",\r\n      render: renderCellBackground,\r\n    },\r\n    {\r\n      title: \"Ideal Line Width\",\r\n      dataIndex: \"idealLineWidth\",\r\n      render: (value, { lineWidthSafetyColor }) => ({\r\n        props: {\r\n          style: { background: lineWidthSafetyColor },\r\n        },\r\n        children: <div>{value}</div>,\r\n      }),\r\n    },\r\n    {\r\n      title: \"Max Line Width\",\r\n      dataIndex: \"maxLineWidth\",\r\n      render: renderCellBackground,\r\n    },\r\n    {\r\n      title: \"Max Extrusion Volume\",\r\n      dataIndex: \"maxExtrusionVolume\",\r\n      render: renderCellBackground,\r\n    },\r\n    {\r\n      title: \"Max Δ Ideal Volume Delta\",\r\n      dataIndex: \"maxVolumeDelta\",\r\n      render: renderCellBackground,\r\n    },\r\n    {\r\n      title: \"Notes\",\r\n      dataIndex: \"notes\",\r\n      render: renderCellBackground,\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      <Form>\r\n        <Form.Item label=\"Ideal Layer Height Step\">\r\n          <InputNumber\r\n            value={idealLayerHeightStep}\r\n            onChange={(e) => {\r\n              const floatValue = parseFloat(e.target.value);\r\n\r\n              if (isNaN(floatValue)) {\r\n                return;\r\n              }\r\n\r\n              setIdealLayerHeightStep(floatValue);\r\n            }}\r\n            step={0.01}\r\n          />\r\n        </Form.Item>\r\n        <Form.Item label=\"Nozzle Diameter\">\r\n          <InputNumber\r\n            value={nozzleDiameter}\r\n            onChange={(e) => {\r\n              const floatValue = parseFloat(e.target.value);\r\n\r\n              if (isNaN(floatValue)) {\r\n                return;\r\n              }\r\n\r\n              setNozzleDiameter(floatValue);\r\n            }}\r\n            step={0.05}\r\n          />\r\n        </Form.Item>\r\n        <Form.Item label=\"Constant Output Volume\">\r\n          {roundTo(outputVolume, 3)}\r\n        </Form.Item>\r\n        <Form.Item label=\"Nozzle Flat Size\">\r\n          <InputNumber\r\n            type=\"number\"\r\n            value={nozzleFlatSize}\r\n            onChange={(e) => {\r\n              const floatValue = parseFloat(e.target.value);\r\n\r\n              if (isNaN(floatValue)) {\r\n                return;\r\n              }\r\n\r\n              setNozzleFlatSize(floatValue);\r\n            }}\r\n            step={0.01}\r\n          />\r\n        </Form.Item>\r\n      </Form>\r\n      <Table dataSource={tableRecords} columns={columns} pagination={false} />\r\n    </>\r\n  );\r\n}\r\n","export function hexToHSL(hex, overrideH, overrideS, overrideL) {\r\n  // Convert hex to RGB first\r\n  let r = 0,\r\n    g = 0,\r\n    b = 0;\r\n  if (hex.length === 4) {\r\n    r = \"0x\" + hex[1] + hex[1];\r\n    g = \"0x\" + hex[2] + hex[2];\r\n    b = \"0x\" + hex[3] + hex[3];\r\n  } else if (hex.length === 7) {\r\n    r = \"0x\" + hex[1] + hex[2];\r\n    g = \"0x\" + hex[3] + hex[4];\r\n    b = \"0x\" + hex[5] + hex[6];\r\n  }\r\n  // Then to HSL\r\n  r /= 255;\r\n  g /= 255;\r\n  b /= 255;\r\n  let cmin = Math.min(r, g, b),\r\n    cmax = Math.max(r, g, b),\r\n    delta = cmax - cmin,\r\n    h = 0,\r\n    s = 0,\r\n    l = 0;\r\n\r\n  if (delta === 0) h = 0;\r\n  else if (cmax === r) h = ((g - b) / delta) % 6;\r\n  else if (cmax === g) h = (b - r) / delta + 2;\r\n  else h = (r - g) / delta + 4;\r\n\r\n  h = overrideH || Math.round(h * 60);\r\n\r\n  if (h < 0) h += 360;\r\n\r\n  l = (cmax + cmin) / 2;\r\n  s = delta === 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));\r\n  s = +(s * 100).toFixed(1);\r\n  l = +(l * 100).toFixed(1);\r\n\r\n  return `hsl(${h},${overrideS || s}%,${overrideL || l}%)`;\r\n}\r\n","import React from \"react\";\nimport { LineWidth } from \"./Components/LineWidth/LineWidth\";\nimport \"antd/dist/antd.css\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <LineWidth />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}